play.application.loader = com.livelygig.product.wallet.impl.WalletApplicationLoader

cassandra-journal.keyspace = wallet
cassandra-snapshot-store.keyspace = walletSnapshot
lagom.persistence.read-side.cassandra.keyspace = walletReadSide
akka.actor.enable-additional-serialization-bindings = on

wallet {
  defaultNonce = 0
  defaultGasPrice = 21000000000
  defaultGasLimit = 315010
  rpc.server = "http://localhost:8545/"
  infura.enabled = true
  infura.mainnet.server = "https://mainnet.infura.io/XtvOcdAGdV9hb72XPInB"
  infura.ropsten.server = "https://ropsten.infura.io/XtvOcdAGdV9hb72XPInB"
  infura.rinkeby.server = "https://rinkeby.infura.io/XtvOcdAGdV9hb72XPInB"
 // infura.kovan.server =   "https://kovan.infura.io/XtvOcdAGdV9hb72XPInB" #infura dont have kuvan network connectivity
  infura.infuranet.server="https://infuranet.infura.io/XtvOcdAGdV9hb72XPInB"
  uploadDirectory = "private/keystore/"
  etherscan.io="https://ropsten.etherscan.io/api"
  etherscan.api_key="ASW65C9FQGCRDPQD1ENJCHQXW2QK1K9ERC"
}
lagom.persistence.read-side {

  # Exponential backoff for failures in ReadSideProcessor
  failure-exponential-backoff {
    # minimum (initial) duration until processor is started again
    # after failure
    min = 10s

    # the exponential back-off is capped to this duration
    max = 60s

    # additional random delay is based on this factor
    random-factor = 0.9
  }

  # The amount of time that a node should wait for the global prepare callback to execute
  global-prepare-timeout = 20s

  # The Akka dispatcher to use for read-side actors and tasks.
  #use-dispatcher = "lagom.persistence.dispatcher"
}
